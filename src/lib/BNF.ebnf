<program> ::= <statement>*

<statement> ::= <variable_declaration>
              | <assignment>
              | <branching>
              | <loop>
              | <function_declaration>
              | <function_call>
              | <return_statement>
              | <output_statement>
              | <semicolon_statement>

<variable_declaration> ::= "+" <identifier> "~" <type> ("=" <expression>)? ";"

<assignment> ::= "<-" <identifier> "=" <expression> ";"

<branching> ::= "?" "[" <expression> "]" "|" <block> "~" (":" "|" <block> "~")?

<loop> ::= "%" "[" <expression> "]" "|" <block> "~"

<function_declaration> ::= "@" <identifier> "::" <parameters> "->" <type> "|" <block> "~"

<function_call> ::= "<>" <identifier> "::" "(" <arguments> ")" ";"

<return_statement> ::= "@" <identifier> "<-" <expression> ";"

<output_statement> ::= "^^" <expression> ";"

<semicolon_statement> ::= <expression> ";"

<block> ::= <statement>*

<expression> ::= <literal>
               | <identifier>
               | <binary_expression>
               | <unary_expression>
               | <object_literal>
               | <object_access>
               | <function_call>

<binary_expression> ::= <expression> <binary_operator> <expression>

<unary_expression> ::= <unary_operator> <expression>

<object_literal> ::= "(" <object_property> ("," <object_property>)* ")"

<object_property> ::= <identifier> ":" <expression>

<object_access> ::= <identifier> "->" <identifier>

<parameters> ::= "none"
               | "<" <parameter> ("," <parameter>)* ">"

<parameter> ::= <identifier> "~" <type>

<arguments> ::= <expression> ("," <expression>)*

<literal> ::= <number_literal>
            | <string_literal>
            | <boolean_literal>

<identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*

<type> ::= "number" | "string" | "bool" | "object" | "void"

<binary_operator> ::= "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">="

<unary_operator> ::= "-" | "!"

<number_literal> ::= [0-9]+(\.[0-9]+)?

<string_literal> ::= "\"" [^"]* "\""

<boolean_literal> ::= "yes" | "no"