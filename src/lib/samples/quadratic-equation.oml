+a~number;

@abs::<x~number> -> number |
    ? [x >= 0] | 
        @abs <- x;
    ~
    : |
        @abs <- (-x);
    ~
~

@sqrt::<num~number> -> number |
    +a~number;
    <-a = 11;

    ? [a >= 10] |
        ^^ "String";
    ~

    ? [num < 0] | 
        @sqrt <- (-1); // Instead of NaN
    ~

    +approx~number;
    <-approx = num;

    +betterApprox~number;
    <-betterApprox = (approx + (num / approx)) / 2;

    %[(<>abs::(approx - betterApprox)) > 0.00000001] | 
        <-approx = betterApprox;
        <-betterApprox = (approx + (num / approx)) / 2;
    ~

    @sqrt <- betterApprox;
~

@solveQuadratic::<a~number & b~number & c~number> -> void |
    +discriminant~number;
    +x1~number;
    +x2~number;
    
    <-discriminant = (b * b) - (4 * a * c);

    ?[discriminant < 0] | 
        ^^ "No real solutions";
    ~
    ?[discriminant == 0] | 
        <-x1 = (-b) / (2 * a);
        ^^ "One solution: ";
        ^^ x1;
    ~
    ?[discriminant > 0] | 
        <-x1 = ((-b) + <>sqrt::(discriminant)) / (2 * a);
        <-x2 = ((-b) - <>sqrt::(discriminant)) / (2 * a);
        ^^ "Two solutions: ";
        ^^ x1;
        ^^ x2;
    ~
~

//<>solveQuadratic::(2, -7, 6);
//<>solveQuadratic::(3, -4, 1);
//<>solveQuadratic::(1, -2, 1);
//<>solveQuadratic::(1, 1, 7);
<>solveQuadratic::(1, 7, -8);